-- ---------------------------------------------------------------------------------------------------------------------------
                                             -- 19 ADVANCED BUISNESS PROBLEMS --
-- ---------------------------------------------------------------------------------------------------------------------------
/* 
Question 1: Query the Top 10 Products by Total sales value,
            Include Product name, total quantity sold, and total sales value.
*/

SELECT oi.product_id ,
         p.product_name,
         ROUND(SUM(oi.sales),2) AS `total sales value`,
         COUNT(oI.order_id) AS `total orders`
FROM order_items AS oi
JOIN products AS p
ON oi.product_id = p.product_id
GROUP BY oi.product_id, p.product_name
ORDER BY SUM(oi.sales) DESC
LIMIT 10;

/* 
Question 2: Calculate total revenue generated by each product category, 
            Include the percentage contribution of each category to total revenue.
*/

SELECT 
      c.category_name, p.category_id,
      ROUND(SUM(oi.sales)) AS `total revenue`, 
      ROUND( 100*SUM(oi.sales)/(SELECT SUM(sales) FROM order_items), 2) AS `percentage contribution`
FROM products AS p
JOIN order_items AS oi
ON p.product_id = oi.product_id
JOIN category AS c
ON c.category_id = p.category_id
GROUP BY p.category_id
ORDER BY `percentage contribution` DESC;

/*
Question 3: Compute the average Order value for each customer,
			Include Only the Customers with more than 5 Orders.
*/

SELECT o.customer_id, 
CONCAT(c.first_name, ' ',c.last_name) AS fullname, ROUND(AVG(oi.sales),2) AS AOV
FROM orders AS o
JOIN order_items AS oi
ON o.order_id = oi.order_id
JOIN customers AS c
ON o.customer_id = c.customer_id
GROUP BY customer_id
HAVING COUNT(o.order_id) >5
ORDER BY AOV DESC ; 

/*
4. Question 4: Query Monthly Total Sales Over the Past year.
               Display the sales trend, grouping by month, return current_month_sales, Last Month Sales.
*/
WITH t AS(SELECT
       MONTH(o.order_date) AS month,
       ROUND(SUM(oi.sales),2) AS current_month_sale
FROM order_items AS oi
JOIN orders AS o
ON oi.order_id = o.order_id
WHERE YEAR(order_date) = YEAR(curdate())-1
GROUP BY MONTH(o.order_date)
ORDER BY MONTH(o.order_date))

SELECT*, ROUND(100*(current_month_sale - last_month_sale)/last_month_sale,2) AS percentage_growth_from_last_month
	  FROM (SELECT *,
      LAG(current_month_sale, 1) OVER ( ORDER BY month) AS last_month_sale
FROM  t) AS c;


/*
Question 5: Find the Customer registered but never placed an order,
            List customer details and the time since their registration.
*/

SELECT 
     c.customer_id, 
     CONCAT(c.first_name, ' ', c.last_name) AS customer_name,
     c.state
FROM customers AS c
LEFT JOIN orders AS o
ON c.customer_id = o.customer_id
GROUP BY c.customer_id
HAVING COUNT(o.order_id) = 0;

/*
Question 6: Identify the best-selling category for each state, Include the Total Sales for that category within each State.
*/

WITH a AS 
(SELECT
       
       cu.state, 
       ca.category_name,
       ROUND(SUM(oi.sales))AS total_sales, 
       COUNT(o.order_id) AS product_sold,
       RANK() OVER( PARTITiON BY cu.state ORDER BY COUNT(o.order_id) DESC) AS ranki  
FROM customers AS cu
JOIN orders AS o
ON cu.customer_id = o.customer_id
JOIN order_items AS oi
ON o.order_id = oi.order_id
JOIN products AS p 
ON oi.product_id = p.product_id
JOIN category AS ca
ON p.category_id = ca.category_id
GROUP BY cu.state, ca.category_id)

SELECT state, category_name, total_sales, product_sold
FROM a
WHERE ranki = 1 ;

SELECT p.product_id,
       COUNT(o.order_id) AS count_of_sale,
       cu.state
FROM customers AS cu
JOIN orders AS o
ON cu.customer_id = o.customer_id
JOIN order_items AS oi
ON o.order_id = oi.order_id
JOIN products AS p 
ON oi.product_id = p.product_id
JOIN category AS ca
ON p.category_id = ca.category_id
GROUP BY cu.state, p.product_id;

/*
Question 7: Identify the least-selling category for each state. Include the Total Sales for that category within each State.
*/
WITH a AS 
(SELECT
       
       cu.state, 
       ca.category_name,
       ROUND(SUM(oi.sales))AS total_sales, 
       COUNT(o.order_id) AS product_sold,
       RANK() OVER( PARTITiON BY cu.state ORDER BY COUNT(o.order_id) ASC) AS ranki  
FROM customers AS cu
JOIN orders AS o
ON cu.customer_id = o.customer_id
JOIN order_items AS oi
ON o.order_id = oi.order_id
JOIN products AS p 
ON oi.product_id = p.product_id
JOIN category AS ca
ON p.category_id = ca.category_id
GROUP BY cu.state, ca.category_id)

SELECT state, category_name, total_sales, product_sold
FROM a
WHERE ranki = 1 ;

SELECT p.product_id,
       COUNT(o.order_id) AS count_of_sale,
       cu.state
FROM customers AS cu
JOIN orders AS o
ON cu.customer_id = o.customer_id
JOIN order_items AS oi
ON o.order_id = oi.order_id
JOIN products AS p 
ON oi.product_id = p.product_id
JOIN category AS ca
ON p.category_id = ca.category_id
GROUP BY cu.state, p.product_id;

/* 
Question 8: Calculate the total value of orders placed by each customer over their lifetime.
			Rank customers based on their Customer Lifetime Sales
*/
  
SELECT 
      c.customer_id, 
      CONCAT(c.first_name, ' ', c.last_name) AS  customer_name,
      ROUND(SUM(oi.sales),2) AS `total value of orders`,
      RANK() OVER( ORDER BY ROUND(SUM(oi.sales)) DESC) AS `customer rank`
FROM customers AS c
JOIN orders AS o
ON c.customer_id = o.customer_id
JOIN order_items AS oi
ON o.order_id = oi.order_id
GROUP BY c.customer_id;
 
/*
Question 9: Query Products with stock levels below a certain threshold(e., less than 10 units),
            Include last restock date and warehouse information
*/

SELECT
      p.product_id, 
      i.stock,
      i.last_stock_date,
      i.warehouse_id
FROM inventory AS i
JOIN products AS p
ON i.product_id = p.product_id
WHERE i.stock < 10; 

/*
Question 10: Identify orders where the shipping date is later than 4 days after the order date.
             Include customer, Order details, and delivery provider.
*/

SELECT
      c.customer_id,
      o.order_id,
      DATEDIFF(s.shipping_date, o.order_date) AS days_for_delivery,
      shipping_providers
FROM customers AS c
JOIN orders AS o
ON c.customer_id = o.customer_id
JOIN shipping  AS s
ON o.order_id = s.order_id
WHERE DATEDIFF(s.shipping_date, o.order_date) >4;

/*
Question 11: Calculate the Percentage of successful payments, access all orders.
             Include breakdown by Payment status (eg., Failed,pending)
*/ 

SELECT
      COUNT(*)AS count_of_payment,
      p.payment_status,
      ROUND( COUNT(*)*100/(SELECT COUNT(*) FROM orders),2) AS `Percentage of successful payments`
FROM payments AS p
JOIN orders AS o
ON p.order_id = o.order_id
GROUP BY p.payment_status;

/*
Question 12: Find the Top 5 sellers based on total Sales value.
             Include both successful and failed Orders, and Display their percentage of successful Orders
*/

WITH a AS (SELECT seller_id,
       COUNT(*) AS successful_orders
FROM orders
WHERE order_status = "completed"
GROUP BY seller_id),

 b AS (SELECT 
      s.seller_id,
      ROUND(SUM(oi.sales),2) AS total_sales_value, 
      COUNT(o.order_id) AS total_orders
FROM sellers AS s
JOIN ORDERS  AS o
ON s.seller_id = o.seller_id
JOIN  order_items AS oi
ON oi.order_id = o.order_id
GROUP BY s.seller_id
ORDER BY SUM(oi.sales) DESC
LIMIT 5)

SELECT a.*, b.*,
      ROUND(100*a.successful_orders/b.total_orders,2) AS `percentage of successful Orders`
FROM a
RIGHT JOIN b
ON a.seller_id = b.seller_id;

/*
Question 13: Calculate the profit margin for each product (difference between price and cost of goods sold), 
             Rank products by their profit margin, showing highest to lowest
*/

SELECT 
      p.product_id,
      p.product_name,
      ROUND(SUM(oi.sales - p.cogs*oi.quantity),2) AS profit,
      ROUND(SUM(oi.sales - (p.cogs*oi.quantity))*100/SUM(oi.sales) ,2) AS profit_margin,
      DENSE_RANK() OVER (ORDER BY (ROUND(SUM(oi.sales - (p.cogs*oi.quantity))*100/SUM(oi.sales) ,2)) DESC) AS rank_,
      p.cogs
FROM products AS p
JOIN order_items AS oi
ON p.product_id = oi.product_id
GROUP BY p.product_id;

/*
Question 14: Query the top 10 products by the number of return. 
             Display the return rate as a percentage of total unitssold for each product
*/

WITH a AS 
       (SELECT oi.product_id,
               COUNT(o.order_id) as return_order_count
FROM shipping AS s
JOIN orders AS o
ON o.order_id = s.order_id
JOIN order_items AS oi
ON o.order_id = oi.order_id
WHERE s.delivery_status = 'Returned '
GROUP BY oi.product_id, s.delivery_status
ORDER BY COUNT(o.order_id) DESC
LIMIT 10),

b AS (SELECT oi.product_id,
       COUNT(o.order_id) AS total_units_sold
FROM orders AS o
JOIN order_items AS oi
ON o.order_id = oi.order_id
GROUP BY oi.product_id
ORDER BY oi.product_id)

SELECT 
      a.product_id,
      a.return_order_count,
      b.total_units_sold,
      ROUND(100*(a.return_order_count)/(b.total_units_sold),2) AS return_rate
FROM a
LEFT JOIN b
ON a.product_id = b.product_id;


/*
Question 15: Identify Seller whose sales value is less then 1000 in the Last 6 month,
             Show the last sale date and total sales from those sellers
*/

WITH a AS (SELECT 
      COUNT(o.order_id) AS num_of_orders,
      o.seller_id,
      ROUND(SUM(oi.sales),2) AS total_sale_in_6months,
      MAX(o.order_date) AS last_sale_date
FROM sellers AS s
LEFT JOIN orders AS o
ON s.seller_id = o.seller_id
JOIN order_items AS oi
ON o.order_id = oi.order_id
WHERE o.order_date 
       BETWEEN DATE_SUB(CURDATE(), INTERVAL 19 MONTH) AND CURDATE()
GROUP BY s.seller_id
ORDER BY s.seller_id) ,

b AS (SELECT
       s.seller_id,
       s.seller_name,
       num_of_orders,
       total_sale_in_6months,
       last_sale_date
FROM sellers AS s
LEFT JOIN a
ON s.seller_id = a.seller_id
WHERE a.total_sale_in_6months <= 1000 OR a.total_sale_in_6months IS NULL),

c AS (SELECT s.seller_id,
             ROUND(SUM(oi.sales),2) AS total_sales
		FROM order_items AS oi
        JOIN orders AS o
        ON oi.order_id = o.order_id
        JOIN sellers AS s
        ON o.seller_id = s.seller_id
        GROUP BY s.seller_id)

SELECT 
       b.seller_id,
       b.seller_name,
       b.num_of_orders,
       b.total_sale_in_6months,
       b.last_sale_date,
       c.total_sales
FROM b
LEFT JOIN c
ON b.seller_id = c.seller_id;

/*
Question 16: if the customer has done more than 5 return, categorize them as returning otherwise new.
            List customers id, name, total orders, total returns
*/
WITH d AS (SELECT 
      c.customer_id,
      c.Fullname,
      COUNT(o.order_id) AS total_orders,
      SUM( CASE WHEN o.order_status = 'returned' THEN 1 ELSE 0 END) AS total_return
FROM customers AS c
JOIN orders AS o
ON c.customer_id = o.customer_id
GROUP BY c.customer_id)

SELECT 
      d.customer_id,
      d.Fullname,
      d.total_orders,
      d.total_return,
      CASE WHEN total_return> 5 THEN 'returning'
           ELSE "new" END AS category
FROM d;

/*
Question 17: Identify the Top 5 Customers with the Highest number of Orders for Each State. 
             Include the Number of Orders and total Sales for each Customer.
*/

SELECT * FROM(SELECT 
       c.customer_id,
       c.Fullname,
       c.state,
       COUNT(o.order_id) AS total_order,
       ROUND(SUM(oi.sales),2) AS total_sale,
       ROUND(SUM(oi.sales),2) AS sales_value,
       ROW_NUMBER() OVER(PARTITION BY c.state ORDER BY COUNT(o.order_id) DESC ) AS rnk
FROM customers AS c
JOIN orders AS o
ON c.customer_id = o.customer_id
JOIN order_items AS oi
ON o.order_id = oi.order_id
GROUP BY c.customer_id, c.state) AS T 
WHERE rnk <=5;

/*
Question 18: Calculate the Total Revenue handled by each shipping provider. 
             Include the Total Number of Orders handled and the Average delivery time for each provider
*/
SELECT
       ROUND(SUM(oi.sales),2) AS total_revenue_handled,
       COUNT(o.order_id) AS total_orders_handle,
       ROUND(AVG(DATEDIFF(s.shipping_date, o.order_date)),2) AS avg_del_time,
       s.shipping_providers

FROM shipping AS s
JOIN orders AS o
ON s.order_id = o.order_id
JOIN order_items AS oi
ON o.order_id = oi.order_id
GROUP BY s.shipping_providers;

/*
Question 19: Top 10 Product with Highest decreasing revenue ratio compare to last year(2022) and current year(2023),
		    Return product_id, Product_name, category_name,2022 revenue and 2023 Revenue decrease ratio at end Round the result
*/

WITH a AS (SELECT 
      p.product_id,
      p.product_name,
      c.category_name,
      ROUND(SUM(oi.sales),2) AS revenue,
      YEAR(order_date) AS yer
FROM products AS p
JOIN order_items AS oi
ON p.product_id = oi.product_id
JOIN orders AS o
ON o.order_id = oi.order_id
JOIN category AS c
ON p.category_id = c.category_id
WHERE  YEAR(order_date) = '2022' OR YEAR(order_date) = '2023'
GROUP BY p.product_id , YEAR(order_date))

SELECT a.product_id, a.product_name, a.category_name , a.revenue AS revenue2022, b.revenue AS revenue2023,
       ROUND((a.revenue- b.revenue)/a.revenue,2) AS revenue_ratio
FROM a  
JOIN a AS b
ON a.product_id = b.product_id AND a.yer < b.yer
ORDER BY revenue_ratio
LIMIT 10;

-- -----------------------------------------------------------------------------------------------------------------------------------
                                                   -- END OF PROJECT --
-- -----------------------------------------------------------------------------------------------------------------------------------





